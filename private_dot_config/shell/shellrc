#!/bin/zsh

# Generic shellrc file, runs for interactive shells.

# History settings
HISTCONTROL=ignoreboth # don't put duplicate lines or lines starting with space in the history.
HISTSIZE=50000

source "${XDG_DATA_HOME}/apparish/bourne-apparish"
source "${XDG_CONFIG_HOME}/shell/aliases"

# Override bm to allow for encrypted chezmoi file
function bm() {
	apparishbm "$1"
	chezmoi add --encrypt "${XDG_DATA_HOME}/apparish/apparixrc"
}

# Mkdir and move in one command
function md() { mkdir -p "$1" && cd "$1" ; }

# vi
set -o vi

# fzf
[ -f "/usr/share/fzf/key-bindings.zsh" ] && source "/usr/share/fzf/key-bindings.zsh"
[ -f "/usr/share/fzf/completion.zsh" ] && source "/usr/share/fzf/completion.zsh"

# broot
[ -f "${XDG_CONFIG_HOME}/broot/launcher/bash/br" ] && source "${XDG_CONFIG_HOME}/broot/launcher/bash/br"

# mcfly
[ -f "/usr/share/doc/mcfly/mcfly.zsh" ] && eval "$(mcfly init zsh)"

# navi
[ -x "/usr/bin/navi" ] && eval "$(navi widget zsh)"

# thefuck
[ -x "/usr/bin/thefuck" ] && eval "$(thefuck --alias)"

# NVM
function load-nvmrc() {
  local node_version="$(nvm version)"
  local nvmrc_path="$(nvm_find_nvmrc)"

  if [ -n "$nvmrc_path" ]; then
    local nvmrc_node_version=$(nvm version "$(cat "${nvmrc_path}")")

    if [ "$nvmrc_node_version" = "N/A" ]; then
      nvm install
    elif [ "$nvmrc_node_version" != "$node_version" ]; then
      nvm use
    fi
  elif [ "$node_version" != "$(nvm version default)" ]; then
    nvm use default
  fi

  [ -s "/usr/share/nvm/bash_completion" ] && source /usr/share/nvm/bash_completion
  [ -s "/usr/share/nvm/install-nvm-exec" ] && source /usr/share/nvm/install-nvm-exec
}

if [ -s "/usr/share/nvm/nvm.sh" ]; then
  nvm_cmds=(nvm node npm yarn)
  for cmd in $nvm_cmds ; do
    alias $cmd="unalias $nvm_cmds && unset nvm_cmds && . $NVM_DIR/nvm.sh --no-use && load-nvmrc && $cmd"
  done
fi

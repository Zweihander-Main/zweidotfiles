#!/usr/bin/zsh -f

# ZSH shellrc file, runs for interactive shells.

start=$(date "+%s.%N")
zmodload zsh/zprof

# History settings
HISTCONTROL=ignoreboth # don't put duplicate lines or lines starting with space in the history.
HISTSIZE=50000

# ZSH settings
DISABLE_AUTO_UPDATE="true"
ZSH_COMPDUMP="${XDG_CACHE_HOME}/zsh/zcompdump-${ZSH_VERSION}"

# make sure completion list is loaded before anything else
zmodload zsh/complist

# All aliases
source "${XDG_CONFIG_HOME}/shell/aliases"

# Mkdir and move in one command
md() { mkdir -p "$1" && cd "$1" || return; }

# fzf
[ -f "/usr/share/fzf/key-bindings.zsh" ] && source "/usr/share/fzf/key-bindings.zsh"
[ -f "/usr/share/fzf/completion.zsh" ] && source "/usr/share/fzf/completion.zsh"

# broot
[ -f "${XDG_CONFIG_HOME}/broot/launcher/bash/br" ] && source "${XDG_CONFIG_HOME}/broot/launcher/bash/br"

# NVM
load_nvmrc() {
    local node_version="$(nvm version)"
    local nvmrc_path="$(nvm_find_nvmrc)"

    if [ -n "$nvmrc_path" ]; then
        local nvmrc_node_version=$(nvm version "$(cat "${nvmrc_path}")")

        if [ "$nvmrc_node_version" = "N/A" ]; then
            nvm install
        elif [ "$nvmrc_node_version" != "$node_version" ]; then
            nvm use
        fi
    elif [ "$node_version" != "$(nvm version default)" ]; then
        nvm use default
    fi

    [ -s "/usr/share/nvm/bash_completion" ] && source /usr/share/nvm/bash_completion
    [ -s "/usr/share/nvm/install-nvm-exec" ] && source /usr/share/nvm/install-nvm-exec
}

if [ -s "/usr/share/nvm/nvm.sh" ]; then
    nvm_cmds=(nvm node npm yarn)
    for cmd in $nvm_cmds; do
        alias $cmd="unalias $nvm_cmds && unset nvm_cmds && . $NVM_DIR/nvm.sh --no-use && load_nvmrc && $cmd"
    done
fi

# source functions
fpath=("${XDG_CONFIG_HOME}/zsh/functions" $fpath)
autoload -Uz "${XDG_CONFIG_HOME}"/zsh/functions/*(.:t)

# vim related
set -o vi
bindkey -v
KEYTIMEOUT=1
cursor_mode
bindkey -M menuselect 'h' vi-backward-char
bindkey -M menuselect 'k' vi-up-line-or-history
bindkey -M menuselect 'l' vi-forward-char
bindkey -M menuselect 'j' vi-down-line-or-history

# Zinit
[ ! -d $ZINIT_HOME ] && mkdir -p "$(dirname $ZINIT_HOME)"
[ ! -d $ZINIT_HOME/.git ] && git clone https://github.com/zdharma-continuum/zinit.git "$ZINIT_HOME"
source "${ZINIT_HOME}/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit

PS1=">" # provide a simple prompt till the theme loads
zinit ice wait'!' lucid
zinit snippet "https://raw.githubusercontent.com/Zweihander-Main/zwei-zeta-zsh-theme/master/zeta.zsh-theme"

zinit wait lucid for \
    atinit"zicompinit; zicdreplay" \
    zdharma-continuum/fast-syntax-highlighting \
    atload"_zsh_autosuggest_start; bindkey '^ ' autosuggest-accept" \
    zsh-users/zsh-autosuggestions \
    blockf atpull'zinit creinstall -q .' \
    zsh-users/zsh-completions \
    OMZL::clipboard.zsh \
    OMZL::completion.zsh \
    OMZL::directories.zsh \
    OMZL::git.zsh \
    OMZL::functions.zsh \
    OMZL::nvm.zsh \
    OMZL::spectrum.zsh \
    OMZL::termsupport.zsh \
    OMZP::colored-man-pages \
    atinit"sed -i 's/function bm()/function apparishbm()/g' .bourne-apparix; \
    sed -i 's/apx_silent bind -q menu-complete/true/g' .bourne-apparix" \
    atload"bindkey '\t' menu-complete" \
    "https://raw.githubusercontent.com/micans/apparix/main/.bourne-apparix"

# Override bm to allow for encrypted chezmoi file
bm() {
    apparishbm "$1"
    chezmoi add --encrypt "${XDG_DATA_HOME}/apparish/apparixrc"
}

end=$(date "+%s.%N")
date -u -d "0 $end sec - $start sec" +"%H:%M:%S.%N"

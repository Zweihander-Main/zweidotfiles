#!/usr/bin/zsh -f

# ZSH shellrc file, runs for interactive shells.

start=$(date "+%s.%N")
zmodload zsh/zprof

# History settings (file defined in env)
HISTCONTROL=ignoreboth # don't put duplicate lines or lines starting with space in the history.
HISTSIZE=50000
SAVEHIST=10000
setopt extended_history       # record timestamp of command in HISTFILE
setopt hist_expire_dups_first # delete duplicates first when HISTFILE size exceeds HISTSIZE
setopt hist_ignore_dups       # ignore duplicated commands history list
setopt HIST_IGNORE_ALL_DUPS      # Delete an old recorded event if a new event is a duplicate.
setopt hist_ignore_space      # ignore commands that start with space
setopt hist_verify            # show command with history expansion to user before running it
setopt share_history          # share command history data

# ZSH settings
DISABLE_AUTO_UPDATE="true"
ZSH_COMPDUMP="${XDG_CACHE_HOME}/zsh/zcompdump-${ZSH_VERSION}"
setopt multios              # enable redirect to multiple streams: echo >file1 >file2
setopt long_list_jobs       # show long list format job notifications
setopt interactivecomments  # recognize comments

# make sure completion list is loaded before anything else
zmodload zsh/complist

# All aliases
source "${XDG_CONFIG_HOME}/shell/aliases"

# Mkdir and move in one command
md() { mkdir -p "$1" && cd "$1" || return; }

# NVM
load_nvmrc() {
    local node_version="$(nvm version)"
    local nvmrc_path="$(nvm_find_nvmrc)"

    if [ -n "$nvmrc_path" ]; then
        local nvmrc_node_version=$(nvm version "$(cat "${nvmrc_path}")")

        if [ "$nvmrc_node_version" = "N/A" ]; then
            nvm install
        elif [ "$nvmrc_node_version" != "$node_version" ]; then
            nvm use
        fi
    elif [ "$node_version" != "$(nvm version default)" ]; then
        nvm use default
    fi

    [ -s "/usr/share/nvm/bash_completion" ] && source /usr/share/nvm/bash_completion
    [ -s "/usr/share/nvm/install-nvm-exec" ] && source /usr/share/nvm/install-nvm-exec
}

if [ -s "/usr/share/nvm/nvm.sh" ]; then
    nvm_cmds=(nvm node npm yarn)
    for cmd in $nvm_cmds; do
        alias $cmd="unalias $nvm_cmds && unset nvm_cmds && . $NVM_DIR/nvm.sh --no-use && load_nvmrc && $cmd"
    done
fi

# source functions
fpath=("${XDG_CONFIG_HOME}/shell/autoload" $fpath)
autoload -Uz "${XDG_CONFIG_HOME}"/shell/autoload/*(.:t)

# vim related
set -o vi
bindkey -v
KEYTIMEOUT=1
cursor_mode
bindkey -M menuselect 'h' vi-backward-char
bindkey -M menuselect 'k' vi-up-line-or-history
bindkey -M menuselect 'l' vi-forward-char
bindkey -M menuselect 'j' vi-down-line-or-history

autoload -Uz edit-command-line
zle -N edit-command-line
bindkey -M vicmd v edit-command-line # hit v for vim (normal mode)

# Add text objects
autoload -Uz select-bracketed select-quoted
zle -N select-quoted
zle -N select-bracketed
for km in viopp visual; do
    bindkey -M $km -- '-' vi-up-line-or-history
    for c in {a,i}${(s..)^:-\'\"\`\|,./:;=+@}; do
        bindkey -M $km $c select-quoted
    done
    for c in {a,i}${(s..)^:-'()[]{}<>bB'}; do
        bindkey -M $km $c select-bracketed
    done
done

# Add vim surround
autoload -Uz surround
zle -N delete-surround surround
zle -N add-surround surround
zle -N change-surround surround
bindkey -M vicmd cs change-surround
bindkey -M vicmd ds delete-surround
bindkey -M vicmd ys add-surround
bindkey -M visual S add-surround

# dir related
setopt auto_cd
setopt auto_pushd
setopt pushd_ignore_dups
setopt pushdminus

# Zinit
[ ! -d $ZINIT_HOME ] && mkdir -p "$(dirname $ZINIT_HOME)"
[ ! -d $ZINIT_HOME/.git ] && git clone https://github.com/zdharma-continuum/zinit.git "$ZINIT_HOME"
source "${ZINIT_HOME}/zinit.zsh"

(( ${+_comps} )) && _comps[zinit]=_zinit

PS1=">" # provide a simple prompt till the theme loads
zinit ice wait'!' lucid
zinit snippet "https://raw.githubusercontent.com/Zweihander-Main/zwei-zeta-zsh-theme/master/zeta.zsh-theme"

zinit wait lucid for \
    \
    atinit"zicompinit; zicdreplay" \
    zdharma-continuum/fast-syntax-highlighting \
    \
    atload"_zsh_autosuggest_start; bindkey '^ ' autosuggest-accept" \
    zsh-users/zsh-autosuggestions \
    \
    blockf atpull'zinit creinstall -q .' \
    zsh-users/zsh-completions \
    \
    OMZL::clipboard.zsh \
    OMZL::completion.zsh \
    OMZL::git.zsh \
    OMZL::functions.zsh \
    OMZL::nvm.zsh \
    OMZL::spectrum.zsh \
    OMZL::termsupport.zsh \
    OMZP::colored-man-pages \
    atinit"sed -i 's/function bm()/function apparishbm()/g' .bourne-apparix; \
    sed -i 's/apx_silent bind -q menu-complete/true/g' .bourne-apparix" \
    atload"bindkey '\t' menu-complete" \
    "https://raw.githubusercontent.com/micans/apparix/main/.bourne-apparix"

zinit wait lucid for \
  @hlissner/zsh-autopair

zinit ice lucid wait"0a" from"gh-r" as"program" bpick"*x86*linux*" atload'eval "$(mcfly init zsh)"'
zinit load cantino/mcfly

zinit ice lucid wait"0" from"gh-r" as"program" bpick"*x86*linux*" atload'eval "$(navi widget zsh)"'
zinit load denisidoro/navi

if [ -x "/usr/bin/thefuck" ]; then
    zinit ice lucid wait'1'
    zinit load laggardkernel/zsh-thefuck
fi

zinit wait lucid for \
  as'program' \
  https://dystroy.org/broot/download/x86_64-linux/broot

if [ -f "${XDG_CONFIG_HOME}/broot/launcher/bash/br" ]; then
    zinit ice lucid wait"0"
    zinit load "${XDG_CONFIG_HOME}/broot/launcher/bash/br"
fi

zinit wait lucid for \
  from'gh-r' \
  as'program' \
  mv'delta-* -> delta' \
  pick'delta/delta' \
  @dandavison/delta

zinit wait lucid for \
  from'gh-r' \
  as'program' \
  pick'rg' \
  bpick"*x86*linux*" \
  id-as'rg' \
  @microsoft/ripgrep-prebuilt

zinit wait lucid for \
  from'gh-r' \
  as'completion' \
  nocompile \
  mv'ripgrep-* -> ripgrep' \
  atclone'ln -nsf "$PWD"/ripgrep/doc/rg.1 "$ZINIT[MAN_DIR]/man1/rg.1"' \
  atpull'%atclone' \
  id-as'rg-man' \
  @BurntSushi/ripgrep

zinit wait lucid for \
  from'gh-r' \
  as'program' \
  pick'bat' \
  atclone'cp -f bat*/autocomplete/bat.zsh _bat' \
  atclone'cp -f bat*/bat bat' \
  atclone'ln -nsf "$PWD/bat"*/bat.1 "$ZINIT[MAN_DIR]/man1/bat.1"' \
  atpull'%atclone' \
  @sharkdp/bat

zinit wait lucid for \
  from'gh-r' \
  as'program' \
  mv'fd-* -> files' \
  pick'files/fd' \
  atclone'ln -svf "$PWD/files/"*.1 "$ZINIT[MAN_DIR]/man1/"' \
  atpull'%atclone' \
  @sharkdp/fd

zinit wait lucid \
    from'gh-r' \
    as'program' \
    atclone'curl -fsSL https://raw.githubusercontent.com/junegunn/fzf/master/bin/fzf-tmux > fzf-tmux' \
    atclone'curl -fsSL https://raw.githubusercontent.com/junegunn/fzf/master/shell/completion.zsh > completion.zsh' \
    atclone'curl -fsSL https://raw.githubusercontent.com/junegunn/fzf/master/shell/key-bindings.zsh > key-bindings.zsh' \
    atclone'curl -fsSL https://raw.githubusercontent.com/junegunn/fzf/master/man/man1/fzf-tmux.1 > fzf-tmux.1' \
    atclone'curl -fsSL https://raw.githubusercontent.com/junegunn/fzf/master/man/man1/fzf.1 > fzf.1' \
    atclone'mkdir -p $ZPFX/{bin,man/man1}' \
    atclone'ln -nsvf *.1 "${ZINIT[MAN_DIR]}/man1"' \
    atclone'chmod +x fzf-tmux' \
    atpull'%atclone' \
    pick'/dev/null' \
    multisrc'key-bindings.zsh' \
    multisrc'completion.zsh' \
  for @junegunn/fzf

zinit wait lucid for id-as'auto' has'fzf' @Aloxaf/fzf-tab

zinit wait lucid for \
  from'gh-r' \
  as'program' \
  mv'lsd* -> lsd' \
  pick'lsd/lsd' \
  atclone'ln -svf "$PWD/lsd/"*.1 "${ZINIT[MAN_DIR]}/man1"' \
  @lsd-rs/lsd

# Override bm to allow for encrypted chezmoi file
bm() {
    apparishbm "$1"
    chezmoi add --encrypt "${XDG_DATA_HOME}/apparish/apparixrc"
}

end=$(date "+%s.%N")
date -u -d "0 $end sec - $start sec" +"%H:%M:%S.%N"

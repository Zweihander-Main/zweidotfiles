# interpreter for shell commands
set shell zsh

# Debug help:
# log_file="$HOME/lf-reflink-log-$(date +'%Y-%m-%d_%H-%M-%S')"
# [ -f "$log_file" ] || touch "$log_file"
# exec 1>> $log_file 2>&1

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
# set shellopts '-eu'

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
# set ifs "\n"

# leave some space at the top and the bottom of the screen
# set scrolloff 10

# use enter for shell commands
# map <enter> shell

# execute current file (must be executable)
# map x $$f
# map X !$f

# dedicated keys for file opener actions
# map o &mimeopen $f
# map O $mimeopen --ask $f

# define a custom 'open' command
cmd open ${{
    test -L $f && f=$(readlink -f $f)
    case $(mimeo -m $f | tail -n1 | tr -d "[:blank:]") in
        text/*) $EDITOR $fx;;
        audio/midi) timidity $fx;;
        audio/*) mpv --save-position-on-quit $fx;;
        *) for f in $fx; do setsid $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}

# define a custom 'rename' command without prompt for overwrite
# cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1
# map r push :rename<space>

# make sure trash folder exists
# %mkdir -p ~/.trash

# move current file or selected files to trash folder
# (also see 'man mv' for backup/overwrite options)
cmd trash %set -f; trash-put $fx 

# define a custom 'delete' command
# cmd delete ${{
#     set -f
#     printf "$fx\n"
#     printf "delete?[y/n]"
#     read ans
#     [ $ans = "y" ] && rm -rf $fx
# }}

# use '<delete>' key for either 'trash' or 'delete' command
map <delete> trash
map g<delete> delete

# Directory manipuklation
map gc calcdirsize
map ~ select "~"

# mkdir
cmd mkdir %{{
    printf "New directory: "
    read ans
    mkdir $ans
    lf -remote "send $id select \"$ans\""
}}
map gm mkdir

# extract the current file with the right command
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

map ge extract

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

# Custom paste, use rsync
cmd paste-special %{{
    load=$(cat ~/.local/share/lf/files)
    mode=$(echo "$load" | sed -n '1p')
    list=$(echo "$load" | sed '1d')
    l=$(echo "$list" | sed ':a;N;$!ba;s/\n/ /g')
    echo $l
    if [ $mode = 'copy' ]; then
        sh -c "rsync --info=progress2 -urh $l . "
    elif [ $mode = 'move' ]; then
        sh -c "rsync --remove-source-files --info=progress2 -rh $l . "
    fi
    rm ~/.local/share/lf/files
    lf -remote 'send load'
    lf -remote 'send clear'
}}

map P paste-special

# FZF Integrations
cmd fzf_apparish ${{
    source "${XDG_DATA_HOME}/zinit/snippets/apparish/apparish"
    res="$(apparish $(apparish | tr -s "[:blank:]" | cut -f2 -d' ' | fzf))"
    if [ -d "$res" ] ; then
        cmd="cd"
    elif [ -f "$res" ] ; then
        cmd="select"
    else
        exit 0
    fi
    lf -remote "send $id $cmd \"$res\""
}}

map gt fzf_apparish

cmd fzf_grep ${{
    res="$( \
        RG_PREFIX="rg --column --line-number --no-heading --color=always \
            --smart-case "
        FZF_DEFAULT_COMMAND="$RG_PREFIX ''" \
            fzf --bind "change:reload:$RG_PREFIX {q} || true" \
            --ansi --layout=reverse --header 'Search in files' \
            | cut -d':' -f1
    )"
    [ ! -z "$res" ] && lf -remote "send $id select \"$res\""
}}

map gs :fzf_grep

cmd fzf_alt_c ${{
    res="$(fd --hidden --follow \
    --exclude .git --exclude node_modules --exclude .cache \
    --type d --min-depth 1 2> /dev/null | \
    fzf --reverse --header='Jump to directory' | \
    sed 's/\\/\\\\/g;s/"/\\"/g')"
    if [ -d "$res" ] ; then
        cmd="cd"
    elif [ -f "$res" ] ; then
        cmd="select"
    else
        exit 0
    fi
    lf -remote "send $id $cmd \"$res\""
}}
map <a-c> :fzf_alt_c

# Previews
set preview true
set previewer ctpv
set cleaner ctpvclear
&ctpv -s $id
&ctpvquit $id

# Misc settings
set hidden

# Icons
# set icons

